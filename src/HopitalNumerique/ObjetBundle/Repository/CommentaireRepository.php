<?php

namespace HopitalNumerique\ObjetBundle\Repository;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Join;
use HopitalNumerique\DomaineBundle\Entity\Domaine;
use HopitalNumerique\ObjetBundle\Entity\Commentaire;
use HopitalNumerique\UserBundle\Entity\User;

/**
 * CommentaireRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommentaireRepository extends EntityRepository
{
    /**
     * Récupère les données du grid sous forme de tableau correctement formaté.
     *
     * @return array
     */
    public function getDatasForGrid()
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('comm.id, comm.dateCreation, comm.texte, comm.publier, objet.id as objId, objet.titre as objTitre, contenu.id as contId, contenu.titre as contTitre, user.lastname as userNom, user.firstname as userPrenom')
            ->from('HopitalNumeriqueObjetBundle:Commentaire', 'comm')
            ->leftJoin('comm.objet', 'objet')
            ->leftJoin('comm.contenu', 'contenu')
            ->leftJoin('comm.user', 'user')
        ;

        return $qb;
    }

    /**
     * Retourne la liste des commentaires étant assigné au domaine.
     *
     * @param int $idDomaine Identifiant du domaine à filtrer
     *
     * @return Commentaire[]|ArrayCollection
     */
    public function findCommentaireByDomaine($idDomaine)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('comm')
            ->from('HopitalNumeriqueObjetBundle:Commentaire', 'comm')
            ->leftJoin('comm.objet', 'objet')
            ->leftJoin('objet.domaines', 'domaine')
            ->where('domaine.id = :idDomaine')
            ->setParameter('idDomaine', $idDomaine)
        ;

        return $qb->getQuery()->getResult();
    }

    /**
     * Count comment for domains array
     *
     * @param Domaine[] $domains
     * @return mixed
     */
    public function countByDomains($domains)
    {
        if (empty($domains)) {
            return null;
        }

        $qb = $this->createQueryBuilder('comment');

        $qb
            ->select($qb->expr()->count('comment.id'))
            ->join('comment.objet', 'objet')
            ->join(
                'objet.domaines',
                'domaine',
                Join::WITH,
                $qb->expr()->in(
                    'domaine',
                    array_map(function (Domaine $domain) {
                        return $domain->getId();
                    }, $domains)
                )
            )
        ;

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * @return array
     */
    public function countGroupByUser()
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('count(c) as nbComment, u.id as idUser')
            ->from('HopitalNumeriqueObjetBundle:Commentaire', 'c')
            ->join('c.user', 'u')
            ->groupBy('u.id')
        ;

        $results = $qb->getQuery()->getResult();

        $comments = [];
        foreach ($results as $key => $result) {
            $comments[$result['idUser']] = intval($result['nbComment']);
        }

        return $comments;
    }

    /**
     * @param User $user
     *
     * @return integer
     */
    public function countForUser(User $user)
    {
        return $this->_em->createQueryBuilder()
            ->select('COUNT(c)')
            ->from(Commentaire::class, 'c')
            ->andWhere('c.user = :userId')->setParameter('userId', $user->getId())

            ->getQuery()->getSingleScalarResult()
        ;
    }
}
