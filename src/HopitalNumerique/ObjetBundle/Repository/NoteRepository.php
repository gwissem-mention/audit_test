<?php

namespace HopitalNumerique\ObjetBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Join;
use HopitalNumerique\DomaineBundle\Entity\Domaine;
use HopitalNumerique\ObjetBundle\Entity\Note;
use HopitalNumerique\UserBundle\Entity\User;
use Doctrine\ORM\QueryBuilder;


/**
 * NoteRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NoteRepository extends EntityRepository
{
    /**
     * Récupère la moyenne des.
     *
     * @return QueryBuilder
     */
    public function getMoyenneNoteByObjet($idObjet, $isContenu)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('avg(note.note)')
            ->from('HopitalNumeriqueObjetBundle:Note', 'note')
        ;
        if ($isContenu) {
            $qb->leftJoin('note.contenu', 'contenu')
                ->where('contenu.id = :contenuId')
                ->setParameter('contenuId', $idObjet)
            ;
        } else {
            $qb->leftJoin('note.objet', 'objet')
                ->where('objet.id = :objetId')
                ->setParameter('objetId', $idObjet)
                ->leftJoin('note.contenu', 'contenu')
                ->andWhere($qb->expr()->isNull('contenu.id'))
            ;
        }

        return $qb;
    }

    /**
     * Récupère le nombre de notes de l'objet passé en param.
     *
     * @return QueryBuilder
     */
    public function countNbNoteByObjet($idObjet, $isContenu)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('count(note.note)')
            ->from('HopitalNumeriqueObjetBundle:Note', 'note')
        ;
        if ($isContenu) {
            $qb->leftJoin('note.contenu', 'contenu')
                ->where('contenu.id = :contenuId')
                ->setParameter('contenuId', $idObjet)
            ;
        } else {
            $qb->leftJoin('note.objet', 'objet')
                ->where('objet.id = :objetId')
                ->setParameter('objetId', $idObjet)
                ->leftJoin('note.contenu', 'contenu')
                ->andWhere($qb->expr()->isNull('contenu.id'))
            ;
        }

        return $qb;
    }

    /**
     * @param $objectId
     * @param $isContenu
     *
     * @return QueryBuilder
     */
    public function countReviewByMark($objectId, $isContenu)
    {
        $qb = $this->createQueryBuilder('note');
        $qb->select('note.note', 'count(note.note) as reviewCount');

        if ($isContenu) {
            $qb->leftJoin('note.contenu', 'contenu')
               ->where('contenu.id = :contenuId')
               ->setParameter('contenuId', $objectId)
            ;
        } else {
            $qb->leftJoin('note.objet', 'objet')
               ->where('objet.id = :objetId')
               ->setParameter('objetId', $objectId)
               ->leftJoin('note.contenu', 'contenu')
               ->andWhere($qb->expr()->isNull('contenu.id'))
            ;
        }

        $qb->addGroupBy('note.note');

        return $qb;
    }

    /**
     * @return array
     */
    public function countGroupByUser()
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('count(n) as nbNote, u.id as idUser')
            ->from('HopitalNumeriqueObjetBundle:Note', 'n')
            ->join('n.user', 'u')
            ->groupBy('u.id')
        ;

        $results = $qb->getQuery()->getResult();

        $notes = [];
        foreach ($results as $key => $result) {
            $notes[$result['idUser']] = intval($result['nbNote']);
        }

        return $notes;
    }

    /**
     * @param User $user
     *
     * @return integer
     */
    public function countForUser(User $user)
    {
        return $this->_em->createQueryBuilder()
            ->select('COUNT(n)')
            ->from(Note::class, 'n')
            ->andWhere('n.user = :userId')->setParameter('userId', $user->getId())

            ->getQuery()->getSingleScalarResult()
        ;
    }

    /**
     * Count notes by domains
     *
     * @param $domains
     * @return int
     */
    public function countByDomains($domains)
    {
        $qb = $this->createQueryBuilder('note');
        $qb
            ->select('COUNT(note.id)')
            ->join('note.objet', 'objet')
            ->join(
                'objet.domaines',
                'domaine',
                Join::WITH,
                $qb->expr()->in(
                    'domaine',
                    array_map(function (Domaine $domain) {
                        return $domain->getId();
                    }, $domains)
                )
            )
        ;

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Get percentage of noted objects with average notation above $threshold
     *
     * @param $domains
     * @param float $threshold Minimum average notation
     *
     * @return float|int|null
     */
    public function computeAverageByDomains($domains, $threshold)
    {
        $qb = $this->createQueryBuilder('note');
        $qb
            ->select(
                'objet.id',
                'AVG(note.note) as average'
            )
            ->join('note.objet', 'objet')
            ->join(
                'objet.domaines',
                'domaine',
                Join::WITH,
                $qb->expr()->in(
                    'domaine',
                    array_map(function (Domaine $domain) {
                        return $domain->getId();
                    }, $domains)
                )
            )
            ->groupBy('objet.id')
        ;

        $result = $qb->getQuery()->getResult();

        if (empty($result)) {
            return null;
        }

        $filtered = count(array_filter($result, function ($result) use ($threshold) {
            return $result['average'] > $threshold;
        }));

        return $filtered * 100 / count($result);
    }
}
