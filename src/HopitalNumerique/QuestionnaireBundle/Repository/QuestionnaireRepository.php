<?php

namespace HopitalNumerique\QuestionnaireBundle\Repository;

use Doctrine\ORM\EntityRepository;
use HopitalNumerique\QuestionnaireBundle\Entity\Occurrence;
use HopitalNumerique\UserBundle\Entity\User;
use HopitalNumerique\DomaineBundle\Entity\Domaine;
use Doctrine\ORM\Query\Expr;

/**
 * QuestionnaireRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuestionnaireRepository extends EntityRepository
{
    /**
     * Récupère les données du grid sous forme de tableau correctement formaté.
     *
     * @return array
     *
     * @author Gaetan MELCHILSEN
     * @copyright Nodevo
     */
    public function getDatasForGrid($domainesIds, $condition = null)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('questionnaire.id, questionnaire.nom, count(DISTINCT user.id) as nbUser, domaine.nom as domaineNom')
            ->from('HopitalNumeriqueQuestionnaireBundle:Questionnaire', 'questionnaire')
            ->leftJoin('questionnaire.questions', 'questions')
            ->leftJoin('questions.reponses', 'reponses')
            ->leftJoin('reponses.user', 'user')

            ->leftJoin('questionnaire.domaines', 'domaine')
                ->where($qb->expr()->orX(
                    $qb->expr()->in('domaine.id', ':domainesId'),
                    $qb->expr()->isNull('domaine.id')
                ))
            ->andWhere('questionnaire.lock = :locked')
            ->setParameters([
                'locked' => false,
                'domainesId' => $domainesIds,
            ])
            ->orderBy('questionnaire.nom')
            ->groupBy('questionnaire.id', 'domaine.id');
            // ->addGroupBy('domaine.id');

        return $qb;
    }

    /**
     * Récupère les questions/réponses d'un questionnaire.
     *
     * @return array
     */
    public function getQuestionsReponses($idQuestionnaire, $idUser, Occurrence $occurrence = null, $paramId = null)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->select('questionnaire, question, reponse')
            ->from('\HopitalNumerique\QuestionnaireBundle\Entity\Question', 'question')
            ->innerJoin('question.questionnaire', 'questionnaire', 'WITH', 'questionnaire.id = :idQuestionnaire')
            ->setParameter('idQuestionnaire', $idQuestionnaire)
        ;

        $qb
            ->leftJoin('question.reponses', 'reponse', 'WITH', 'reponse.user = :idUser' . (null !== $paramId ? ' AND reponse.paramId = :paramId' : '') . (null !== $occurrence ? ' AND reponse.occurrence = :occurrence' : ''))
            ->setParameter('idUser', $idUser)
        ;

        if ($paramId != null) {
            $qb->setParameter('paramId', $paramId);
        }

        if (null !== $occurrence) {
            $qb->setParameter('occurrence', $occurrence->getId());
        }

        $qb->orderBy('question.ordre');

        return $qb->getQuery()->getResult();
    }

    /**
     * Retourne les questionnaires (avec leurs occurrences) d'un utilisateur.
     *
     * @param \HopitalNumerique\UserBundle\Entity\User $user Utilisateur
     *
     * @return array<\HopitalNumerique\QuestionnaireBundle\Entity\Questionnaire> Questionnaires
     */
    public function findByUser(User $user)
    {
        $query = $this->createQueryBuilder('questionnaire');

        $query
            ->select('questionnaire', 'occurrence')
            ->innerJoin('questionnaire.questions', 'question')
            ->innerJoin('question.reponses', 'reponse', \Doctrine\ORM\Query\Expr\Join::WITH, 'reponse.user = :user')
            ->leftJoin('questionnaire.occurrences', 'occurrence', \Doctrine\ORM\Query\Expr\Join::WITH, 'occurrence.user = :user')
            ->setParameter('user', $user)
            ->groupBy('questionnaire.id', 'occurrence.id')
            ->addOrderBy('questionnaire.id', 'ASC')
            ->addOrderBy('occurrence.id', 'ASC')
        ;

        return $query->getQuery()->getResult();
    }

    /**
     * Retourne les questionnaires d'un domaine.
     *
     * @param \HopitalNumerique\DomaineBundle\Entity\Domaine $domaine Domaine
     *
     * @return \Doctrine\Common\Collections\Collection Questionnaires
     */
    public function findByDomaine(Domaine $domaine)
    {
        $query = $this->createQueryBuilder('questionnaire');

        $query
            ->innerJoin('questionnaire.domaines', 'domaine', Expr\Join::WITH, 'domaine.id = :domaine')
            ->setParameter('domaine', $domaine);

        return $query->getQuery()->getResult();
    }

    /*
     * Retourne les questionnaires (avec leurs occurrences) d'un utilisateur pour un domaine avec les dates de création et de dernières modifications.
     *
     * @param \HopitalNumerique\UserBundle\Entity\User       $user    Utilisateur
     * @param \HopitalNumerique\DomaineBundle\Entity\Domaine $domaine Domaine
     * @param boolean                                        $isLock  (optionnel) Filtre sur questionnaire.lock
     * @return array<\HopitalNumerique\QuestionnaireBundle\Entity\Questionnaire> Questionnaires
     */
    public function findByUserAndDomaineWithDates(User $user, Domaine $domaine, $isLock = null)
    {
        $query = $this->createQueryBuilder('questionnaire');

        $query
            ->addSelect('questionnaire', 'occurrence')
            ->addSelect('MIN(reponse.dateCreation) AS dateCreation')
            ->addSelect('MAX(reponse.dateUpdate) AS dernierUpdate')
            ->leftJoin('questionnaire.questions', 'question')
            ->leftJoin('question.reponses', 'reponse', \Doctrine\ORM\Query\Expr\Join::WITH, 'reponse.user = :user')
            ->leftJoin('questionnaire.occurrences', 'occurrence', \Doctrine\ORM\Query\Expr\Join::WITH, 'occurrence.user = :user')
            ->setParameter('user', $user)
            ->innerJoin('questionnaire.domaines', 'domaine', \Doctrine\ORM\Query\Expr\Join::WITH, 'domaine = :domaine')
            ->setParameter('domaine', $domaine)
            ->having($query->expr()->orX('COUNT(reponse) > :zero', $query->expr()->isNotNull('occurrence.id')))
            ->setParameter('zero', 0)
        ;
        if (null !== $isLock) {
            $query
                ->andWhere('questionnaire.lock = :lock')
                ->setParameter('lock', $isLock)
            ;
        }
        $query
            ->groupBy('questionnaire.id', 'occurrence.id')
            ->addOrderBy('questionnaire.id', 'ASC')
            ->addOrderBy('occurrence.id', 'ASC')
        ;

        return $query->getQuery()->getResult();
    }
}
