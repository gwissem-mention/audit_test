<?php

namespace HopitalNumerique\QuestionnaireBundle\Repository;

use Doctrine\ORM\EntityRepository;
use HopitalNumerique\QuestionnaireBundle\Entity\Occurrence;

/**
 * QuestionnaireRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuestionnaireRepository extends EntityRepository
{    

    /**
     * Récupère les données du grid sous forme de tableau correctement formaté
     *
     * @return array
     * 
     * @author Gaetan MELCHILSEN
     * @copyright Nodevo
     */
    public function getDatasForGrid($domainesIds, $condition = null)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('questionnaire.id, questionnaire.nom, count(DISTINCT user.id) as nbUser, domaine.nom as domaineNom')
            ->from('HopitalNumeriqueQuestionnaireBundle:Questionnaire', 'questionnaire')
            ->leftJoin('questionnaire.questions' , 'questions')
            ->leftJoin('questions.reponses', 'reponses')
            ->leftJoin('reponses.user', 'user')

            ->leftJoin('questionnaire.domaines', 'domaine')
                ->where($qb->expr()->orX(
                    $qb->expr()->in('domaine.id', ':domainesId'),
                    $qb->expr()->isNull('domaine.id')
                ))
            ->andWhere('questionnaire.lock = :locked')
            ->setParameters(array(
                'locked' => false,
                'domainesId' => $domainesIds
            ))
            ->orderBy('questionnaire.nom')
            ->groupBy('questionnaire.id', 'domaine.id');
            // ->addGroupBy('domaine.id');
        
        return $qb;
    }

    /**
     * Récupère les questions/réponses d'un questionnaire
     *
     * @return array
     */
    public function getQuestionsReponses( $idQuestionnaire, $idUser, Occurrence $occurrence = null, $paramId = null )
    {
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->select('questionnaire, question, reponse')
            ->from('\HopitalNumerique\QuestionnaireBundle\Entity\Question', 'question')
            ->innerJoin('question.questionnaire', 'questionnaire' ,'WITH' , 'questionnaire.id = :idQuestionnaire')
            ->setParameter('idQuestionnaire', $idQuestionnaire )
        ;

        $qb
            ->leftJoin('question.reponses', 'reponse', 'WITH' , 'reponse.user = :idUser'.(null !== $paramId ? ' AND reponse.paramId = :paramId' : '').(null !== $occurrence ? ' AND reponse.occurrence = :occurrence' : ''))
            ->setParameter('idUser', $idUser )
        ;

        if ($paramId != null)
        {
            $qb->setParameter('paramId', $paramId);
        }

        if (null !== $occurrence)
        {
            $qb->setParameter('occurrence', $occurrence->getId());
        }

        $qb->orderBy('question.ordre');

        return $qb->getQuery()->getResult();
    }
}
