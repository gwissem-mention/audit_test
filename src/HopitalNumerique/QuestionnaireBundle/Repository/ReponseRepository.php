<?php

namespace HopitalNumerique\QuestionnaireBundle\Repository;

use Doctrine\ORM\EntityRepository;
use HopitalNumerique\QuestionnaireBundle\Entity\Occurrence;

/**
 * ReponseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReponseRepository extends EntityRepository
{
    /**
     * Récupère les réponses pour l'utilisateur en fonction du questionnaire passés en param
     *
     * @return array
     */
    public function reponsesByQuestionnaireByUser( $idQuestionnaire, $idUser, Occurrence $occurrence = null, $paramId = null)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('reponse')
            ->from('\HopitalNumerique\QuestionnaireBundle\Entity\Reponse', 'reponse')
            ->leftJoin('reponse.question', 'question')
            ->leftJoin('reponse.user', 'user')
            ->where( 'user.id = :idUser')
            ->setParameter('idUser', $idUser );
            
            if ($paramId != null) {
                $qb->andWhere('reponse.paramId = :paramId')
                    ->setParameter('paramId', $paramId);
            }
            
            $qb->leftJoin('reponse.reference', 'reference')
            ->innerJoin('question.questionnaire', 'questionnaire', 'WITH', 'questionnaire.id = :idQuestionnaire')
            ->setParameter('idQuestionnaire', $idQuestionnaire )
            ->leftJoin('question.typeQuestion', 'typeQuestion');
        
        if (null !== $occurrence)
        {
            $qb
                ->andWhere('reponse.occurrence = :occurrence')
                ->setParameter('occurrence', $occurrence)
            ;
        }
    
        return $qb->getQuery();
    }

    /**
     * Récupère les réponses du questionnaire passés en param
     *
     * @return array
     */
    public function reponsesByQuestionnaire( $idQuestionnaire, $paramId = null)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('reponse')
            ->from('\HopitalNumerique\QuestionnaireBundle\Entity\Reponse', 'reponse')
            ->leftJoin('reponse.question', 'question');
            
            if ($paramId != null) {
                $qb->andWhere('reponse.paramId = :paramId')
                    ->setParameter('paramId', $paramId);
            }
            
            $qb->leftJoin('reponse.reference', 'reference')
            ->innerJoin('question.questionnaire', 'questionnaire', 'WITH', 'questionnaire.id = :idQuestionnaire')
            ->setParameter('idQuestionnaire', $idQuestionnaire )
            ->leftJoin('question.typeQuestion', 'typeQuestion');
    
        return $qb->getQuery();
    }
    
    /**
     * Récupère les réponses pour l'utilisateur en fonction du questionnaire passés en param pour les questions de type 'file'
     *
     * @return array
     */
    public function reponsesByQuestionnaireByUserByFileQuestion( $idQuestionnaire, $idUser, Occurrence $occurrence = null )
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('reponse')
            ->from('\HopitalNumerique\QuestionnaireBundle\Entity\Reponse', 'reponse')
            ->leftJoin('reponse.question', 'question')
            ->leftJoin('reponse.user', 'user')
            ->where( 'user.id = :idUser')
            ->setParameter('idUser', $idUser )
            ->innerJoin('question.questionnaire', 'questionnaire', 'WITH', 'questionnaire.id = :idQuestionnaire')
            ->setParameter('idQuestionnaire', $idQuestionnaire )
            ->innerJoin('question.typeQuestion', 'typeQuestion', 'WITH', 'typeQuestion.libelle = :libTypeQuestion')
            ->setParameter('libTypeQuestion', 'file' );
        
        if (null !== $occurrence)
        {
            $qb
                ->andWhere('reponse.occurrence = :occurrence')
                ->setParameter('occurrence', $occurrence)
            ;
        }
    
        return $qb->getQuery();
    }
    
    /**
     * Récupère les réponses du questionnaire passés en param
     *
     * @return array
     */
    public function getReponsesForQuestionnaireOrderByUser( $idQuestionnaire )
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('reponse')
            ->from('\HopitalNumerique\QuestionnaireBundle\Entity\Reponse', 'reponse')
            ->leftJoin('reponse.question', 'question')
            ->innerJoin('question.questionnaire', 'questionnaire', 'WITH', 'questionnaire.id = :idQuestionnaire')
            ->setParameter('idQuestionnaire', $idQuestionnaire );
    
        return $qb->getQuery();
    }
    
    /**
     * Récupère les réponses pour l'utilisateur en fonction des questionnaires passés en param
     * 
     * @param int $idExpert      Identifiant du questionnaire expert
     * @param int $idAmbassadeur Identifiant du questionnaire ambassadeur
     *
     * @return array Tableau sous la forme array(utilisateur => array(questionnaireId))
     */
    public function reponseExiste($idExpert, $idAmbassadeur)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('reponse.id as repId, user.id as userId, questionnaire.id as questId')
            ->from('\HopitalNumerique\QuestionnaireBundle\Entity\Reponse', 'reponse')
            ->leftJoin('reponse.question', 'question')
            ->leftJoin('reponse.user', 'user')
            ->leftJoin('question.questionnaire', 'questionnaire')
                // ->where('questionnaire.id = :expertId OR questionnaire.id = :ambassadeurId')
                // ->setParameters(array(
                //         'expertId'      => $idExpert,
                //         'ambassadeurId' => $idAmbassadeur
                //     )
                // )
            ->groupBy('user, questionnaire');
        
        return $qb->getQuery();
    }
}
