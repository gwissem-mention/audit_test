<?php

namespace HopitalNumerique\QuestionnaireBundle\Repository;

use Doctrine\ORM\EntityRepository;
use HopitalNumerique\QuestionnaireBundle\Entity\Occurrence;
use HopitalNumerique\QuestionnaireBundle\Entity\Questionnaire;
use HopitalNumerique\UserBundle\Entity\User;

/**
 * ReponseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReponseRepository extends EntityRepository
{
    /**
     * Récupère les réponses pour l'utilisateur en fonction du questionnaire passés en param
     *
     * @param $idQuestionnaire
     * @param $idUser
     * @param Occurrence|null $occurrence
     * @param null $paramId
     * @return \Doctrine\ORM\Query
     */
    public function reponsesByQuestionnaireByUser( $idQuestionnaire, $idUser, Occurrence $occurrence = null, $paramId = null)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('reponse')
            ->from('\HopitalNumerique\QuestionnaireBundle\Entity\Reponse', 'reponse')
            ->leftJoin('reponse.question', 'question')
            ->leftJoin('reponse.user', 'user')
            ->where('user.id = :idUser')
            ->setParameter('idUser', $idUser);

        if ($paramId != null) {
            $qb->andWhere('reponse.paramId = :paramId')
                ->setParameter('paramId', $paramId);
        }

        $qb->leftJoin('reponse.reference', 'reference')
            ->innerJoin('question.questionnaire', 'questionnaire', 'WITH', 'questionnaire.id = :idQuestionnaire')
            ->setParameter('idQuestionnaire', $idQuestionnaire)
            ->leftJoin('question.typeQuestion', 'typeQuestion');

        if (null !== $occurrence) {
            $qb
                ->andWhere('reponse.occurrence = :occurrence')
                ->setParameter('occurrence', $occurrence)
            ;
        }

        return $qb->getQuery();
    }

    /**
     * Récupère les réponses du questionnaire passés en param
     *
     * @param $idQuestionnaire
     * @param null $paramId
     * @return \Doctrine\ORM\Query
     */
    public function reponsesByQuestionnaire($idQuestionnaire, $paramId = null)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('reponse')
            ->from('\HopitalNumerique\QuestionnaireBundle\Entity\Reponse', 'reponse')
            ->leftJoin('reponse.question', 'question');

        if ($paramId != null) {
            $qb->andWhere('reponse.paramId = :paramId')
                ->setParameter('paramId', $paramId);
        }

        $qb->leftJoin('reponse.reference', 'reference')
            ->innerJoin('question.questionnaire', 'questionnaire', 'WITH', 'questionnaire.id = :idQuestionnaire')
            ->setParameter('idQuestionnaire', $idQuestionnaire)
            ->leftJoin('question.typeQuestion', 'typeQuestion');

        return $qb->getQuery();
    }

    /**
     * Récupère les réponses pour l'utilisateur en fonction du questionnaire passés en param
     * pour les questions de type 'file'
     *
     * @param $idQuestionnaire
     * @param $idUser
     * @param Occurrence|null $occurrence
     * @return \Doctrine\ORM\Query
     */
    public function reponsesByQuestionnaireByUserByFileQuestion($idQuestionnaire, $idUser, Occurrence $occurrence = null)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('reponse')
            ->from('\HopitalNumerique\QuestionnaireBundle\Entity\Reponse', 'reponse')
            ->leftJoin('reponse.question', 'question')
            ->leftJoin('reponse.user', 'user')
            ->where('user.id = :idUser')
            ->setParameter('idUser', $idUser)
            ->innerJoin('question.questionnaire', 'questionnaire', 'WITH', 'questionnaire.id = :idQuestionnaire')
            ->setParameter('idQuestionnaire', $idQuestionnaire)
            ->innerJoin('question.typeQuestion', 'typeQuestion', 'WITH', 'typeQuestion.libelle = :libTypeQuestion')
            ->setParameter('libTypeQuestion', 'file');

        if (null !== $occurrence) {
            $qb
                ->andWhere('reponse.occurrence = :occurrence')
                ->setParameter('occurrence', $occurrence)
            ;
        }

        return $qb->getQuery();
    }

    /**
     * Récupère les réponses du questionnaire passés en param
     *
     * @param $idQuestionnaire
     * @return \Doctrine\ORM\Query
     */
    public function getReponsesForQuestionnaireOrderByUser($idQuestionnaire)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('reponse')
            ->from('\HopitalNumerique\QuestionnaireBundle\Entity\Reponse', 'reponse')
            ->leftJoin('reponse.question', 'question')
            ->innerJoin('question.questionnaire', 'questionnaire', 'WITH', 'questionnaire.id = :idQuestionnaire')
            ->setParameter('idQuestionnaire', $idQuestionnaire);

        return $qb->getQuery();
    }

    /**
     * Récupère les réponses pour l'utilisateur en fonction des questionnaires passés en param
     *
     * @param int $idExpert      Identifiant du questionnaire expert
     * @param int $idAmbassadeur Identifiant du questionnaire ambassadeur
     * @return \Doctrine\ORM\Query
     */
    public function reponseExiste($idExpert, $idAmbassadeur)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('reponse.id as repId, user.id as userId, questionnaire.id as questId')
            ->from('\HopitalNumerique\QuestionnaireBundle\Entity\Reponse', 'reponse')
            ->leftJoin('reponse.question', 'question')
            ->leftJoin('reponse.user', 'user')
            ->leftJoin('question.questionnaire', 'questionnaire')
            // ->where('questionnaire.id = :expertId OR questionnaire.id = :ambassadeurId')
            // ->setParameters(array(
            //         'expertId'      => $idExpert,
            //         'ambassadeurId' => $idAmbassadeur
            //     )
            // )
            ->groupBy('user.id, questionnaire.id');

        return $qb->getQuery();
    }


    /**
     * Affecte une occurrence à toutes les réponses d'un questionnaire répondu par un utilisateur.
     *
     * @param \HopitalNumerique\QuestionnaireBundle\Entity\Occurrence    $occurrence    Occurrence
     * @param \HopitalNumerique\QuestionnaireBundle\Entity\Questionnaire $questionnaire Questionnaire
     * @param \HopitalNumerique\UserBundle\Entity\User                   $user          User
     * @return void
     */
    public function setOccurrenceByQuestionnaireAndUser(Occurrence $occurrence, Questionnaire $questionnaire, User $user)
    {
        $query = $this->createQueryBuilder('reponse');

        $query
            ->update()
            ->set('reponse.occurrence', $occurrence->getId())

            ->where($query->expr()->in('reponse.question', $questionnaire->getQuestionIds())) // innerJoin() ne fonctionnant pas avec update() en Doctrine
            ->andWhere('reponse.user = :user')
            ->setParameter('user', $user)
        ;

        $query->getQuery()->execute();
    }
}
