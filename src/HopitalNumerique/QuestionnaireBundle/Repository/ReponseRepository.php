<?php

namespace HopitalNumerique\QuestionnaireBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ReponseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReponseRepository extends EntityRepository
{
    /**
     * Récupère les réponses pour l'utilisateur en fonction du questionnaire passés en param
     *
     * @return array
     */
    public function reponsesByQuestionnaireByUser( $idQuestionnaire, $idUser )
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('reponse')
        ->from('\HopitalNumerique\QuestionnaireBundle\Entity\Reponse', 'reponse')
        ->leftJoin('reponse.question', 'question')
        ->leftJoin('reponse.user', 'user')
        ->where( 'user.id = :idUser')
        ->setParameter('idUser', $idUser )
        ->leftJoin('reponse.reference', 'reference')
        ->innerJoin('question.questionnaire', 'questionnaire', 'WITH', 'questionnaire.id = :idQuestionnaire')
        ->setParameter('idQuestionnaire', $idQuestionnaire )
        ->leftJoin('question.typeQuestion', 'typeQuestion');
    
        return $qb->getQuery();
    }
    
    /**
     * Récupère les réponses pour l'utilisateur en fonction du questionnaire passés en param pour les questions de type 'file'
     *
     * @return array
     */
    public function reponsesByQuestionnaireByUserByFileQuestion( $idQuestionnaire, $idUser )
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('reponse')
        ->from('\HopitalNumerique\QuestionnaireBundle\Entity\Reponse', 'reponse')
        ->leftJoin('reponse.question', 'question')
        ->leftJoin('reponse.user', 'user')
        ->where( 'user.id = :idUser')
        ->setParameter('idUser', $idUser )
        ->innerJoin('question.questionnaire', 'questionnaire', 'WITH', 'questionnaire.id = :idQuestionnaire')
        ->setParameter('idQuestionnaire', $idQuestionnaire )
        ->innerJoin('question.typeQuestion', 'typeQuestion', 'WITH', 'typeQuestion.libelle = :libTypeQuestion')
        ->setParameter('libTypeQuestion', 'file' );
    
        return $qb->getQuery();
    }
    
    public function reponseExiste($idExpert, $idAmbassadeur)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('reponse.id as repId, user.id as userId, questionnaire.id as questId')
        ->from('\HopitalNumerique\QuestionnaireBundle\Entity\Reponse', 'reponse')
        ->leftJoin('reponse.question', 'question')
        ->leftJoin('reponse.user', 'user')
        ->leftJoin('question.questionnaire', 'questionnaire', 'WITH', 'questionnaire.id = :expertId OR questionnaire.id = :ambassadeurId')
        ->setParameter('expertId', $idExpert)
        ->setParameter('ambassadeurId', $idAmbassadeur)
        ->groupBy('user, questionnaire');
        
        return $qb->getQuery();
    }
}
