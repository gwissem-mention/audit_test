<?php

namespace HopitalNumerique\RechercheParcoursBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * MaitriseUserRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MaitriseUserRepository extends EntityRepository
{
    /**
     * Retourne la moyenne des notes pour les étapes passées en param.
     *
     * @param array $etapesId [description]
     * @param       $user
     *
     * @return QueryBuilder
     */
    public function getAverage(array $etapesId, $user)
    {
        return $this->_em->createQueryBuilder()
            ->select('etape.id as etapeId, avg(notes.pourcentageMaitrise) as moyenne')
            ->from('\HopitalNumerique\RechercheParcoursBundle\Entity\MaitriseUser', 'notes')
            ->andWhere('notes.nonConcerne = :nonConcerne')
            ->setParameter('nonConcerne', false)
            ->leftJoin('notes.rechercheParcoursDetails', 'etape')
            ->andWhere('etape.id IN (:ids)')
            ->setParameter('ids', $etapesId)
            ->andWhere('notes.user = :user')
            ->setParameter('user', $user)
            ->groupBy('etape.id')
            ->orderBy('etape.order')
        ;
    }

    /**
     * Retourne la moyenne de l'ensemble des notes pour tout les utilisateurs.
     *
     * @param string $profilType Choix sur le filtre profil ou type ES
     *
     * @return QueryBuilder
     */
    public function getAverageAllEtapesAllUser($profilType)
    {
        $qb = $this->_em->createQueryBuilder();

        if ('profil' === $profilType) {
            $qb->select(
                'etape.id as etapeId,
                avg(notes.pourcentageMaitrise) as moyenne,
                count(notes.pourcentageMaitrise) as nbNote,
                count(DISTINCT notes.user) as nbUser,
                profileType.id as filtreId'
            );
        } elseif ('typeES' === $profilType) {
            $qb->select(
                'etape.id as etapeId,
                avg(notes.pourcentageMaitrise) as moyenne,
                count(notes.pourcentageMaitrise) as nbNote,
                count(DISTINCT notes.user) as nbUser,
                organizationType.id as filtreId'
            );
        } elseif ('fonction' === $profilType) {
            $qb->select(
                'etape.id as etapeId,
                avg(notes.pourcentageMaitrise) as moyenne,
                count(notes.pourcentageMaitrise) as nbNote,
                count(DISTINCT notes.user) as nbUser,
                fonction.id as filtreId'
            );
        } else {
            $qb->select(
                'etape.id as etapeId,
                 avg(notes.pourcentageMaitrise) as moyenne,
                 count(notes.pourcentageMaitrise) as nbNote,
                 count(SELECT DISTINCT notes.user) as nbUser'
            );
        }

        $qb
            ->from('\HopitalNumerique\RechercheParcoursBundle\Entity\MaitriseUser', 'notes')
            ->andWhere('notes.nonConcerne = :nonConcerne')
            ->leftJoin('notes.rechercheParcoursDetails', 'etape')
            ->leftJoin('notes.user', 'user')
            //Ne pas prendre en compte les admins (méthode moche)
            ->andWhere('user.roles != :adminId')
            ->setParameters([
                'adminId' => 'a:1:{i:0;s:21:"ROLE_ADMINISTRATEUR_1";}',
                'nonConcerne' => false,
            ]);

        if ('profil' === $profilType) {
            $qb->leftJoin('user.profileType', 'profileType')
               ->groupBy('etape.id, profileType.id')
            ;
        } elseif ('typeES' === $profilType) {
            $qb->leftJoin('user.organizationType', 'organizationType')
               ->groupBy('etape.id, organizationType.id')
            ;
        } elseif ('fonction' === $profilType) {
            $qb->leftJoin('user.jobType', 'fonction')
               ->groupBy('etape.id, fonction.id')
            ;
        } else {
            $qb->groupBy('etape.id');
        }

        $qb->orderBy('etape.order');

        return $qb;
    }
}
