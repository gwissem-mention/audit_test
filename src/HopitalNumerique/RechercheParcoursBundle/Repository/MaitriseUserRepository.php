<?php

namespace HopitalNumerique\RechercheParcoursBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * MaitriseUserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MaitriseUserRepository extends EntityRepository
{
    /**
     * Retourne la moyenne des notes pour les Ã©tapes passÃ©es en param
     *
     * @param array $etapesId [description]
     *
     * @return QueryBuilder
     */
    public function getAverage(array $etapesId, $user)
    {
        return $this->_em->createQueryBuilder()
                         ->select('etape.id as etapeId, avg(notes.pourcentageMaitrise) as moyenne')
                         ->from('\HopitalNumerique\RechercheParcoursBundle\Entity\MaitriseUser', 'notes')
                                ->andWhere('notes.nonConcerne = :nonConcerne')
                                ->setParameter('nonConcerne', false)
                                ->leftJoin('notes.rechercheParcoursDetails', 'etape')
                                ->andWhere('etape.id IN (:ids)')
                                ->setParameter('ids', $etapesId)
                                ->andWhere('notes.user = :user')
                                ->setParameter('user', $user)
                         ->groupBy('etape.id')
                         ->orderBy('etape.order');
    }

    /**
     * Retourne la moyenne de l'ensemble des notes pour tout les utilisateurs
     *
     * @param string $profilType Choix sur le filtre profil ou type ES
     *
     * @return QueryBuilder
     */
    public function getAverageAllEtapesAllUser($profilType)
    {
        $qb = $this->_em->createQueryBuilder();

                    if("profil" === $profilType)
                    {
                        $qb->select('etape.id as etapeId, avg(notes.pourcentageMaitrise) as moyenne, profilEtablissementSante.id as filtreId');
                    }
                    elseif("typeES" === $profilType)
                    {
                        $qb->select('etape.id as etapeId, avg(notes.pourcentageMaitrise) as moyenne, statutEtablissementSante.id as filtreId');
                    }
                    else
                    {
                        $qb->select('etape.id as etapeId, avg(notes.pourcentageMaitrise) as moyenne');

                    }
                    
                    $qb->from('\HopitalNumerique\RechercheParcoursBundle\Entity\MaitriseUser', 'notes')
                            ->andWhere('notes.nonConcerne = :nonConcerne')
                            ->setParameter('nonConcerne', false)
                            ->leftJoin('notes.rechercheParcoursDetails', 'etape')
                            ->leftJoin('notes.user', 'user');

                    if("profil" === $profilType)
                    {
                        $qb->leftJoin('user.profilEtablissementSante', 'profilEtablissementSante')
                           ->groupBy('etape.id, profilEtablissementSante.id');
                    }
                    elseif("typeES" === $profilType)
                    {
                        $qb->leftJoin('user.statutEtablissementSante', 'statutEtablissementSante')
                           ->groupBy('etape.id, statutEtablissementSante.id');
                    }
                    else
                    {
                        $qb->groupBy('etape.id');

                    }
                    
                    $qb->orderBy('etape.order');


        return $qb;
    }
}
